name: Tests

on:
  - push
  - pull_request

jobs:
  tests:
    name: ${{ matrix.session }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        session:
          [pre-commit, safety, mypy, tests, typeguard, xdoctest, docs-build]
    env:
      NOXSESSION: ${{ matrix.session }}
      FORCE_COLOR: "1"
      PRE_COMMIT_COLOR: always
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Set up Python 3.10 and 3.11
        uses: actions/setup-python@v4
        with:
          python-version: |
            3.10
            3.11
      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version
      - name: Upgrade pip in virtual environments
        shell: python
        run: |
          import os
          import pip

          with open(os.environ["GITHUB_ENV"], mode="a") as io:
              print(f"VIRTUALENV_PIP={pip.__version__}", file=io)
      - name: Install Poetry
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt poetry
          poetry --version
      - name: Install dependencies using Poetry
        run: poetry install --ansi
      - name: Install Nox
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
          pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
          nox --version
      - name: Compute pre-commit cache key
        if: matrix.session == 'pre-commit'
        id: pre-commit-cache
        shell: python
        run: |
          import hashlib
          import os
          import sys

          python = f"py{sys.version_info[0]}.{sys.version_info[1]}"
          payload = sys.version.encode() + sys.executable.encode()
          digest = hashlib.sha256(payload).hexdigest()
          result = f"${{ runner.os }}-{python}-{digest}-pre-commit"

          with open(os.environ["GITHUB_OUTPUT"], "a") as gh_out:
              print(f"result={result}", file=gh_out)
      - name: Restore pre-commit cache
        uses: actions/cache@v3
        if: matrix.session == 'pre-commit'
        with:
          path: ~/.cache/pre-commit
          key: ${{ steps.pre-commit-cache.outputs.result }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ steps.pre-commit-cache.outputs.result }}-
      - name: Run Nox
        run: nox
      - name: Upload coverage data
        if: always() && matrix.session == 'tests'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-data
          path: ".coverage.*"
      - name: Upload documentation
        if: matrix.session == 'docs-build'
        uses: actions/upload-artifact@v3
        with:
          name: docs
          path: docs/_build
  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version
      - name: Install Poetry
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt poetry
          poetry --version
      - name: Install dependencies using Poetry
        run: poetry install --ansi
      - name: Install Nox
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
          pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
          nox --version
      - name: Download coverage data
        uses: actions/download-artifact@v3
        with:
          name: coverage-data
      - name: Combine coverage data and display human readable report
        run: |
          nox --session=coverage
      - name: Create coverage report
        run: |
          nox --session=coverage -- xml
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
